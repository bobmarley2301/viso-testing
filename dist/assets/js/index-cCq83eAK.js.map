{"version":3,"file":"index-cCq83eAK.js","sources":["../../../node_modules/react-dom/client.js","../../../src/services/api.ts","../../../src/hooks/useSelectedRecipes.ts","../../../src/components/RecipeCard.tsx","../../../src/components/Pagination.tsx","../../../src/App.tsx","../../../src/components/Root.tsx","../../../src/pages/RecipesPage.tsx","../../../src/hooks/useDebounce.ts","../../../src/pages/RecipeDetailsPage.tsx","../../../src/pages/SelectedRecipesPage.tsx","../../../src/main.tsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import axios from \"axios\";\nimport { RecipeResponse } from \"../types/recipe\";\n\nconst BASE_URL = \"https://www.themealdb.com/api/json/v1/1\";\n\nexport const api = {\n  async searchRecipes(query: string): Promise<RecipeResponse> {\n    const response = await axios.get(`${BASE_URL}/search.php?s=${query}`);\n    return response.data;\n  },\n\n  async getRecipeById(id: string): Promise<RecipeResponse> {\n    const response = await axios.get(`${BASE_URL}/lookup.php?i=${id}`);\n    return response.data;\n  },\n\n  async getRecipesByCategory(category: string): Promise<RecipeResponse> {\n    const response = await axios.get(`${BASE_URL}/filter.php?c=${category}`);\n    return response.data;\n  },\n\n  async getAllCategories(): Promise<{ meals: { strCategory: string }[] }> {\n    const response = await axios.get(`${BASE_URL}/categories.php`);\n    return response.data;\n  },\n\n  async getRandomMeal(): Promise<RecipeResponse> {\n    const response = await axios.get(`${BASE_URL}/random.php`);\n    return response.data;\n  },\n\n  async getRecipesByArea(area: string): Promise<RecipeResponse> {\n    const response = await axios.get(`${BASE_URL}/filter.php?a=${area}`);\n    return response.data;\n  },\n\n  async getRecipesByIngredient(ingredient: string): Promise<RecipeResponse> {\n    const response = await axios.get(`${BASE_URL}/filter.php?i=${ingredient}`);\n    return response.data;\n  },\n\n  async getAllAreas(): Promise<{ meals: { strArea: string }[] }> {\n    const response = await axios.get(`${BASE_URL}/list.php?a=list`);\n    return response.data;\n  },\n\n  async getAllIngredients(): Promise<{ meals: { strIngredient: string }[] }> {\n    const response = await axios.get(`${BASE_URL}/list.php?i=list`);\n    return response.data;\n  },\n\n  getSmallImageUrl(imageUrl: string): string {\n    return imageUrl.replace(\n      \"/images/media/meals/\",\n      \"/images/media/meals/preview/\"\n    );\n  },\n};\n","import { create } from 'zustand'\nimport { Recipe } from '../types/recipe'\n\ninterface SelectedRecipesStore {\n\tselectedRecipes: Recipe[]\n\taddRecipe: (recipe: Recipe) => void\n\tremoveRecipe: (recipe: Recipe) => void\n\tgetIngredients: () => { name: string; measure: string }[]\n}\n\nexport const useSelectedRecipes = create<SelectedRecipesStore>()(\n\t(set, get) => ({\n\t\tselectedRecipes: [],\n\n\t\taddRecipe: (recipe) =>\n\t\t\tset((state) => ({\n\t\t\t\tselectedRecipes: [...state.selectedRecipes, recipe],\n\t\t\t})),\n\n\t\tremoveRecipe: (recipe) =>\n\t\t\tset((state) => ({\n\t\t\t\tselectedRecipes: state.selectedRecipes.filter(\n\t\t\t\t\t(r) => r.idMeal !== recipe.idMeal\n\t\t\t\t),\n\t\t\t})),\n\n\t\tgetIngredients: () => {\n\t\t\tconst { selectedRecipes } = get()\n\t\t\tconst ingredientsMap = new Map<string, string>()\n\n\t\t\tselectedRecipes.forEach((recipe) => {\n\t\t\t\tObject.entries(recipe)\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t([key, value]) =>\n\t\t\t\t\t\t\tkey.startsWith('strIngredient') && value\n\t\t\t\t\t)\n\t\t\t\t\t.forEach(([key, value]) => {\n\t\t\t\t\t\tconst measureKey = `strMeasure${key.slice(13)}`\n\t\t\t\t\t\tconst measure = recipe[\n\t\t\t\t\t\t\tmeasureKey as keyof Recipe\n\t\t\t\t\t\t] as string\n\t\t\t\t\t\tingredientsMap.set(value as string, measure)\n\t\t\t\t\t})\n\t\t\t})\n\n\t\t\treturn Array.from(ingredientsMap.entries()).map(\n\t\t\t\t([name, measure]) => ({\n\t\t\t\t\tname,\n\t\t\t\t\tmeasure,\n\t\t\t\t})\n\t\t\t)\n\t\t},\n\t})\n)\n","import {\n  Box,\n  Image,\n  VStack,\n  Button,\n  useToast,\n  HStack,\n  Badge,\n  useColorModeValue,\n  Text,\n  Icon,\n  Link as ChakraLink,\n  Tooltip,\n} from \"@chakra-ui/react\";\nimport { Recipe } from \"../types/recipe\";\nimport { useSelectedRecipes } from \"../hooks/useSelectedRecipes\";\nimport { Link } from \"@tanstack/react-router\";\nimport { StarIcon } from \"@chakra-ui/icons\";\n\ninterface RecipeCardProps {\n  recipe: Recipe;\n  onSelect?: (recipe: Recipe) => void;\n}\n\nexport const RecipeCard = ({ recipe, onSelect }: RecipeCardProps) => {\n  const { addRecipe, selectedRecipes, removeRecipe } = useSelectedRecipes();\n  const toast = useToast();\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.700\");\n  const textColor = useColorModeValue(\"gray.600\", \"gray.400\");\n\n  const isSelected = selectedRecipes.some((r) => r.idMeal === recipe.idMeal);\n\n  const handleSelect = () => {\n    if (onSelect) {\n      onSelect(recipe);\n    } else {\n      if (isSelected) {\n        removeRecipe(recipe);\n        toast({\n          title: \"Рецепт видалено\",\n          description: `${recipe.strMeal} видалено з вибраних рецептів`,\n          status: \"info\",\n          duration: 3000,\n          isClosable: true,\n        });\n      } else {\n        addRecipe(recipe);\n        toast({\n          title: \"Рецепт додано\",\n          description: `${recipe.strMeal} додано до вибраних рецептів`,\n          status: \"success\",\n          duration: 3000,\n          isClosable: true,\n        });\n      }\n    }\n  };\n\n  const recipeLink = `/recipe/${recipe.idMeal}`;\n\n  return (\n    <Box\n      bg={bgColor}\n      borderWidth=\"1px\"\n      borderColor={borderColor}\n      borderRadius=\"lg\"\n      overflow=\"hidden\"\n      transition=\"all 0.3s\"\n      _hover={{ transform: \"translateY(-4px)\", shadow: \"lg\" }}\n      position=\"relative\"\n    >\n      <ChakraLink\n        as={Link}\n        to={recipeLink}\n        fontSize=\"1.25rem\"\n        fontWeight=\"bold\"\n        cursor=\"pointer\"\n        textDecoration=\"none\"\n        color={useColorModeValue(\"gray.800\", \"white\")}\n        _hover={{ color: \"blue.500\" }}\n      >\n        <Box position=\"relative\" paddingTop=\"75%\">\n          <Image\n            src={recipe.strMealThumb}\n            alt={recipe.strMeal}\n            position=\"absolute\"\n            top=\"0\"\n            left=\"0\"\n            width=\"100%\"\n            height=\"100%\"\n            objectFit=\"cover\"\n            cursor=\"pointer\"\n            transition=\"transform 0.3s\"\n            _hover={{ transform: \"scale(1.05)\" }}\n          />\n        </Box>\n      </ChakraLink>\n\n      <VStack p={4} align=\"start\" spacing={3}>\n        <ChakraLink\n          as={Link}\n          to={recipeLink}\n          fontSize=\"1.25rem\"\n          fontWeight=\"bold\"\n          cursor=\"pointer\"\n          textDecoration=\"none\"\n          color={useColorModeValue(\"gray.800\", \"white\")}\n          _hover={{ color: \"blue.500\" }}\n        >\n          {recipe.strMeal}\n        </ChakraLink>\n\n        <HStack spacing={2} flexWrap=\"wrap\">\n          <Badge colorScheme=\"blue\" borderRadius=\"full\" px={3} py={1}>\n            {recipe.strCategory}\n          </Badge>\n          <Badge colorScheme=\"green\" borderRadius=\"full\" px={3} py={1}>\n            {recipe.strArea}\n          </Badge>\n        </HStack>\n\n        <Text color={textColor} fontSize=\"sm\" noOfLines={2}>\n          {recipe.strInstructions}\n        </Text>\n\n        <Tooltip\n          label={isSelected ? \"Видалити з вибраних\" : \"Додати до вибраних\"}\n          placement=\"top\"\n        >\n          <Button\n            colorScheme={isSelected ? \"red\" : \"blue\"}\n            onClick={handleSelect}\n            width=\"100%\"\n            leftIcon={<Icon as={StarIcon} />}\n            variant={isSelected ? \"solid\" : \"outline\"}\n            transition=\"all 0.2s\"\n            _hover={{\n              transform: \"translateY(-1px)\",\n              shadow: \"md\",\n            }}\n          >\n            {isSelected ? \"Вибрано\" : \"Вибрати\"}\n          </Button>\n        </Tooltip>\n      </VStack>\n    </Box>\n  );\n};\n","import { Box, Button, HStack, useColorModeValue } from \"@chakra-ui/react\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@chakra-ui/icons\";\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  onPageChange: (page: number) => void;\n}\n\nexport const Pagination = ({\n  currentPage,\n  totalPages,\n  onPageChange,\n}: PaginationProps) => {\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.700\");\n  const activeColor = useColorModeValue(\"blue.500\", \"blue.300\");\n  const inactiveColor = useColorModeValue(\"gray.600\", \"gray.400\");\n\n  const getPageNumbers = () => {\n    const pages = [];\n    const maxVisiblePages = 7;\n\n    if (totalPages <= maxVisiblePages) {\n      for (let i = 1; i <= totalPages; i++) {\n        pages.push(i);\n      }\n    } else {\n      if (currentPage <= 4) {\n        for (let i = 1; i <= 7; i++) {\n          pages.push(i);\n        }\n        pages.push(\"...\", totalPages);\n      } else if (currentPage >= totalPages - 3) {\n        pages.push(1, \"...\");\n        for (let i = totalPages - 6; i <= totalPages; i++) {\n          pages.push(i);\n        }\n      } else {\n        pages.push(1, \"...\");\n        for (let i = currentPage - 2; i <= currentPage + 2; i++) {\n          pages.push(i);\n        }\n        pages.push(\"...\", totalPages);\n      }\n    }\n\n    return pages;\n  };\n\n  return (\n    <HStack spacing={2} justify=\"center\" mt={8} mb={4}>\n      <Button\n        onClick={() => onPageChange(currentPage - 1)}\n        isDisabled={currentPage === 1}\n        leftIcon={<ChevronLeftIcon />}\n        variant=\"outline\"\n        colorScheme=\"blue\"\n        size=\"sm\"\n        transition=\"all 0.2s\"\n        _hover={{\n          transform: \"translateX(-2px)\",\n          shadow: \"sm\",\n        }}\n        _disabled={{\n          opacity: 0.5,\n          cursor: \"not-allowed\",\n        }}\n      >\n        Попередня\n      </Button>\n\n      {getPageNumbers().map((page, index) => (\n        <Box key={index}>\n          {page === \"...\" ? (\n            <Box px={3} py={1} color={inactiveColor} fontWeight=\"medium\">\n              ...\n            </Box>\n          ) : (\n            <Button\n              onClick={() => onPageChange(page as number)}\n              variant={currentPage === page ? \"solid\" : \"outline\"}\n              colorScheme={currentPage === page ? \"blue\" : \"gray\"}\n              size=\"sm\"\n              minW=\"40px\"\n              h=\"40px\"\n              p={0}\n              transition=\"all 0.2s\"\n              _hover={{\n                transform: \"translateY(-2px)\",\n                shadow: \"sm\",\n              }}\n              _active={{\n                transform: \"translateY(0)\",\n              }}\n              bg={currentPage === page ? activeColor : bgColor}\n              color={currentPage === page ? \"white\" : inactiveColor}\n              borderColor={currentPage === page ? activeColor : borderColor}\n            >\n              {page}\n            </Button>\n          )}\n        </Box>\n      ))}\n\n      <Button\n        onClick={() => onPageChange(currentPage + 1)}\n        isDisabled={currentPage === totalPages}\n        rightIcon={<ChevronRightIcon />}\n        variant=\"outline\"\n        colorScheme=\"blue\"\n        size=\"sm\"\n        transition=\"all 0.2s\"\n        _hover={{\n          transform: \"translateX(2px)\",\n          shadow: \"sm\",\n        }}\n        _disabled={{\n          opacity: 0.5,\n          cursor: \"not-allowed\",\n        }}\n      >\n        Наступна\n      </Button>\n    </HStack>\n  );\n};\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport {\n  RouterProvider,\n  createRouter,\n  createRootRoute,\n  createRoute,\n} from \"@tanstack/react-router\";\nimport { RecipesPage } from \"./pages/RecipesPage\";\nimport { RecipeDetailsPage } from \"./pages/RecipeDetailsPage\";\nimport { SelectedRecipesPage } from \"./pages/SelectedRecipesPage\";\nimport { Root } from \"./components/Root\";\nimport \"./types/router\";\n\nconst queryClient = new QueryClient();\n\nconst rootRoute = createRootRoute({\n  component: Root,\n});\n\nconst recipesRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/\",\n  component: RecipesPage,\n});\n\nconst recipeDetailsRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/recipe/$recipeId\",\n  component: RecipeDetailsPage,\n});\n\nconst selectedRecipesRoute = createRoute({\n  getParentRoute: () => rootRoute,\n  path: \"/selected\",\n  component: SelectedRecipesPage,\n});\n\nconst routeTree = rootRoute.addChildren([\n  recipesRoute,\n  recipeDetailsRoute,\n  selectedRecipesRoute,\n]);\n\nconst router = createRouter({\n  routeTree,\n});\n\ndeclare module \"@tanstack/react-router\" {\n  interface Register {\n    router: typeof router;\n  }\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ChakraProvider>\n        <RouterProvider router={router} />\n      </ChakraProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import {\n  Box,\n  Flex,\n  useColorModeValue,\n  Link as ChakraLink,\n} from \"@chakra-ui/react\";\nimport { Link, Outlet, useRouter } from \"@tanstack/react-router\";\n\nexport const Root = () => {\n  const router = useRouter();\n  const bgColor = useColorModeValue(\"blue.500\", \"blue.600\");\n  const activeLinkColor = useColorModeValue(\"white\", \"white\");\n  const inactiveLinkColor = useColorModeValue(\n    \"whiteAlpha.800\",\n    \"whiteAlpha.800\"\n  );\n\n  return (\n    <Box minH=\"100vh\" bg={useColorModeValue(\"gray.50\", \"gray.900\")}>\n      <Flex\n        as=\"nav\"\n        align=\"center\"\n        justify=\"space-between\"\n        wrap=\"wrap\"\n        padding=\"1rem 2rem\"\n        bg={bgColor}\n        color=\"white\"\n        boxShadow=\"sm\"\n      >\n        <Flex align=\"center\" mr={5}>\n          <ChakraLink\n            as={Link}\n            to=\"/\"\n            fontSize=\"1.5rem\"\n            fontWeight=\"bold\"\n            color=\"white\"\n            textDecoration=\"none\"\n            transition=\"opacity 0.2s\"\n            _hover={{ opacity: 0.8 }}\n          >\n            Рецепти\n          </ChakraLink>\n        </Flex>\n        <Flex gap={4}>\n          <ChakraLink\n            as={Link}\n            to=\"/\"\n            color={\n              router.state.location.pathname === \"/\"\n                ? activeLinkColor\n                : inactiveLinkColor\n            }\n            textDecoration=\"none\"\n            padding=\"0.5rem 1rem\"\n            borderRadius=\"md\"\n            transition=\"all 0.2s\"\n            _hover={{ bg: \"whiteAlpha.200\" }}\n          >\n            Всі рецепти\n          </ChakraLink>\n          <ChakraLink\n            as={Link}\n            to=\"/selected\"\n            color={\n              router.state.location.pathname === \"/selected\"\n                ? activeLinkColor\n                : inactiveLinkColor\n            }\n            textDecoration=\"none\"\n            padding=\"0.5rem 1rem\"\n            borderRadius=\"md\"\n            transition=\"all 0.2s\"\n            _hover={{ bg: \"whiteAlpha.200\" }}\n          >\n            Вибрані рецепти\n          </ChakraLink>\n        </Flex>\n      </Flex>\n\n      <Box as=\"main\" py={8}>\n        <Outlet />\n      </Box>\n    </Box>\n  );\n};\n","import { useState, useMemo } from \"react\";\nimport {\n  Box,\n  Container,\n  Grid,\n  Input,\n  Select,\n  VStack,\n  Heading,\n  useColorModeValue,\n  InputGroup,\n  InputLeftElement,\n  Skeleton,\n  Text,\n} from \"@chakra-ui/react\";\nimport { SearchIcon } from \"@chakra-ui/icons\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../services/api\";\nimport { RecipeCard } from \"../components/RecipeCard\";\nimport { useDebounce } from \"../hooks/useDebounce\";\nimport { Pagination } from \"../components/Pagination\";\n\nconst ITEMS_PER_PAGE = 12;\n\nexport const RecipesPage = () => {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedArea, setSelectedArea] = useState(\"\");\n  const [selectedIngredient, setSelectedIngredient] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const debouncedSearch = useDebounce(searchQuery, 500);\n\n  const bgColor = useColorModeValue(\"white\", \"gray.800\");\n  const borderColor = useColorModeValue(\"gray.200\", \"gray.700\");\n\n  const { data: areasData, isLoading: isLoadingAreas } = useQuery({\n    queryKey: [\"areas\"],\n    queryFn: api.getAllAreas,\n  });\n\n  const { data: ingredientsData, isLoading: isLoadingIngredients } = useQuery({\n    queryKey: [\"ingredients\"],\n    queryFn: api.getAllIngredients,\n  });\n\n  const { data: recipesData, isLoading: isLoadingRecipes } = useQuery({\n    queryKey: [\"recipes\", debouncedSearch, selectedArea, selectedIngredient],\n    queryFn: async () => {\n      if (debouncedSearch) {\n        return api.searchRecipes(debouncedSearch);\n      }\n      if (selectedArea) {\n        return api.getRecipesByArea(selectedArea);\n      }\n      if (selectedIngredient) {\n        return api.getRecipesByIngredient(selectedIngredient);\n      }\n      const randomMeals = await Promise.all(\n        Array(14)\n          .fill(null)\n          .map(() => api.getRandomMeal())\n      );\n      return {\n        meals: randomMeals.flatMap((meal) => meal.meals || []),\n      };\n    },\n  });\n\n  const recipes = useMemo(() => {\n    return recipesData?.meals || [];\n  }, [recipesData]);\n\n  const totalPages = Math.ceil(recipes.length / ITEMS_PER_PAGE);\n  const paginatedRecipes = useMemo(() => {\n    return recipes.slice(\n      (currentPage - 1) * ITEMS_PER_PAGE,\n      currentPage * ITEMS_PER_PAGE\n    );\n  }, [recipes, currentPage]);\n\n  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(e.target.value);\n    setSelectedArea(\"\");\n    setSelectedIngredient(\"\");\n    setCurrentPage(1);\n  };\n\n  const handleAreaChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedArea(e.target.value);\n    setSearchQuery(\"\");\n    setSelectedIngredient(\"\");\n    setCurrentPage(1);\n  };\n\n  const handleIngredientChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedIngredient(e.target.value);\n    setSearchQuery(\"\");\n    setSelectedArea(\"\");\n    setCurrentPage(1);\n  };\n\n  return (\n    <Container maxW=\"container.xl\" py={8}>\n      <VStack spacing={8} align=\"stretch\">\n        <Heading textAlign=\"center\" size=\"xl\" mb={8}>\n          Рецепти\n        </Heading>\n\n        <Box width=\"100%\">\n          <InputGroup size=\"lg\">\n            <InputLeftElement pointerEvents=\"none\">\n              <SearchIcon color=\"gray.400\" />\n            </InputLeftElement>\n            <Input\n              placeholder=\"Пошук рецептів...\"\n              value={searchQuery}\n              onChange={handleSearch}\n              bg={bgColor}\n              borderColor={borderColor}\n              _hover={{ borderColor: \"blue.500\" }}\n              _focus={{ borderColor: \"blue.500\" }}\n            />\n          </InputGroup>\n        </Box>\n\n        <Grid templateColumns=\"repeat(2, 1fr)\" gap={4} width=\"100%\">\n          <Skeleton isLoaded={!isLoadingAreas}>\n            <Select\n              placeholder=\"Виберіть кухню\"\n              value={selectedArea}\n              onChange={handleAreaChange}\n              bg={bgColor}\n              borderColor={borderColor}\n              _hover={{ borderColor: \"blue.500\" }}\n              _focus={{ borderColor: \"blue.500\" }}\n            >\n              {areasData?.meals?.map((area) => (\n                <option key={area.strArea} value={area.strArea}>\n                  {area.strArea}\n                </option>\n              ))}\n            </Select>\n          </Skeleton>\n\n          <Skeleton isLoaded={!isLoadingIngredients}>\n            <Select\n              placeholder=\"Виберіть інгредієнт\"\n              value={selectedIngredient}\n              onChange={handleIngredientChange}\n              bg={bgColor}\n              borderColor={borderColor}\n              _hover={{ borderColor: \"blue.500\" }}\n              _focus={{ borderColor: \"blue.500\" }}\n            >\n              {ingredientsData?.meals?.map((ingredient) => (\n                <option\n                  key={ingredient.strIngredient}\n                  value={ingredient.strIngredient}\n                >\n                  {ingredient.strIngredient}\n                </option>\n              ))}\n            </Select>\n          </Skeleton>\n        </Grid>\n\n        {isLoadingRecipes ? (\n          <Grid\n            templateColumns={{\n              base: \"1fr\",\n              md: \"repeat(2, 1fr)\",\n              lg: \"repeat(3, 1fr)\",\n            }}\n            gap={6}\n            width=\"100%\"\n          >\n            {Array(6)\n              .fill(null)\n              .map((_, index) => (\n                <Skeleton key={index} height=\"300px\" borderRadius=\"lg\" />\n              ))}\n          </Grid>\n        ) : recipes.length === 0 ? (\n          <Text textAlign=\"center\" fontSize=\"lg\" color=\"gray.500\">\n            Рецептів не знайдено\n          </Text>\n        ) : (\n          <Grid\n            templateColumns={{\n              base: \"1fr\",\n              md: \"repeat(2, 1fr)\",\n              lg: \"repeat(3, 1fr)\",\n            }}\n            gap={6}\n            width=\"100%\"\n          >\n            {paginatedRecipes.map((recipe) => (\n              <RecipeCard key={recipe.idMeal} recipe={recipe} />\n            ))}\n          </Grid>\n        )}\n\n        {totalPages > 1 && (\n          <Pagination\n            currentPage={currentPage}\n            totalPages={totalPages}\n            onPageChange={setCurrentPage}\n          />\n        )}\n      </VStack>\n    </Container>\n  );\n};\n","import { useEffect, useState } from \"react\";\n\nexport function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import { useParams } from \"@tanstack/react-router\";\nimport {\n  Container,\n  VStack,\n  Heading,\n  Image,\n  Text,\n  Grid,\n  Box,\n  List,\n  ListItem,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"../services/api\";\nimport { useSelectedRecipes } from \"../hooks/useSelectedRecipes\";\nimport { Recipe } from \"../types/recipe\";\n\nexport const RecipeDetailsPage = () => {\n  const { recipeId } = useParams({ from: \"/recipe/$recipeId\" });\n  const { addRecipe, removeRecipe, selectedRecipes } = useSelectedRecipes();\n  const toast = useToast();\n\n  const { data: recipeData } = useQuery({\n    queryKey: [\"recipe\", recipeId],\n    queryFn: () => api.getRecipeById(recipeId),\n  });\n\n  const recipe = recipeData?.meals?.[0];\n  const isSelected = selectedRecipes.some((r) => r.idMeal === recipe?.idMeal);\n\n  if (!recipe) {\n    return (\n      <Container maxW=\"container.xl\" py={8}>\n        <Heading>Рецепт не знайдено</Heading>\n      </Container>\n    );\n  }\n\n  const ingredients = Object.entries(recipe)\n    .filter(([key, value]) => key.startsWith(\"strIngredient\") && value)\n    .map(([key, value]) => {\n      const measureKey = `strMeasure${key.slice(13)}` as keyof Recipe;\n      return {\n        ingredient: value,\n        measure: recipe[measureKey],\n      };\n    });\n\n  const handleToggleSelect = () => {\n    if (isSelected) {\n      removeRecipe(recipe);\n      toast({\n        title: \"Рецепт видалено\",\n        description: `${recipe.strMeal} видалено з вибраних рецептів`,\n        status: \"info\",\n        duration: 3000,\n        isClosable: true,\n      });\n    } else {\n      addRecipe(recipe);\n      toast({\n        title: \"Рецепт додано\",\n        description: `${recipe.strMeal} додано до вибраних рецептів`,\n        status: \"success\",\n        duration: 3000,\n        isClosable: true,\n      });\n    }\n  };\n\n  return (\n    <Container maxW=\"container.xl\" py={8}>\n      <VStack spacing={8} align=\"stretch\">\n        <Grid templateColumns={{ base: \"1fr\", md: \"1fr 1fr\" }} gap={8}>\n          <Box>\n            <Image\n              src={recipe.strMealThumb}\n              alt={recipe.strMeal}\n              borderRadius=\"lg\"\n              width=\"100%\"\n              objectFit=\"cover\"\n            />\n          </Box>\n\n          <VStack align=\"start\" spacing={4}>\n            <Heading>{recipe.strMeal}</Heading>\n            <Text color=\"gray.600\">Категорія: {recipe.strCategory}</Text>\n            <Text color=\"gray.600\">Кухня: {recipe.strArea}</Text>\n            <Text color=\"gray.600\">Інструкції: {recipe.strInstructions}</Text>\n            <Box\n              as=\"button\"\n              onClick={handleToggleSelect}\n              px={4}\n              py={2}\n              bg={isSelected ? \"red.500\" : \"blue.500\"}\n              color=\"white\"\n              borderRadius=\"md\"\n              _hover={{\n                bg: isSelected ? \"red.600\" : \"blue.600\",\n              }}\n            >\n              {isSelected ? \"Видалити з вибраних\" : \"Додати до вибраних\"}\n            </Box>\n          </VStack>\n        </Grid>\n\n        <Box>\n          <Heading size=\"md\" mb={4}>\n            Інгредієнти\n          </Heading>\n          <List spacing={2}>\n            {ingredients.map((item, index) => (\n              <ListItem key={index}>\n                {item.measure} {item.ingredient}\n              </ListItem>\n            ))}\n          </List>\n        </Box>\n      </VStack>\n    </Container>\n  );\n};\n","import {\n  Container,\n  VStack,\n  Heading,\n  Grid,\n  Box,\n  Text,\n  List,\n  ListItem,\n  useToast,\n  Divider,\n} from \"@chakra-ui/react\";\nimport { useSelectedRecipes } from \"../hooks/useSelectedRecipes\";\nimport { RecipeCard } from \"../components/RecipeCard\";\nimport { Recipe } from \"../types/recipe\";\n\nexport const SelectedRecipesPage = () => {\n  const { selectedRecipes, removeRecipe, getIngredients } =\n    useSelectedRecipes();\n  const toast = useToast();\n\n  const handleRemove = (recipe: Recipe) => {\n    removeRecipe(recipe);\n    toast({\n      title: \"Рецепт видалено\",\n      description: `${recipe.strMeal} видалено з вибраних рецептів`,\n      status: \"info\",\n      duration: 3000,\n      isClosable: true,\n    });\n  };\n\n  if (selectedRecipes.length === 0) {\n    return (\n      <Container maxW=\"container.xl\" py={8}>\n        <VStack spacing={4}>\n          <Heading>Мої вибрані рецепти</Heading>\n          <Text>У вас поки немає вибраних рецептів</Text>\n        </VStack>\n      </Container>\n    );\n  }\n\n  return (\n    <Container maxW=\"container.xl\" py={8}>\n      <VStack spacing={8} align=\"stretch\">\n        <Heading>Мої вибрані рецепти</Heading>\n\n        <Grid\n          templateColumns={{\n            base: \"1fr\",\n            md: \"repeat(2, 1fr)\",\n            lg: \"repeat(3, 1fr)\",\n            xl: \"repeat(4, 1fr)\",\n          }}\n          gap={6}\n        >\n          {selectedRecipes.map((recipe) => (\n            <RecipeCard\n              key={recipe.idMeal}\n              recipe={recipe}\n              onSelect={handleRemove}\n            />\n          ))}\n        </Grid>\n\n        <Divider />\n\n        <Box>\n          <Heading size=\"md\" mb={4}>\n            Список інгредієнтів:\n          </Heading>\n          <List spacing={2}>\n            {getIngredients().map((ingredient) => (\n              <ListItem key={ingredient.name}>\n                • {ingredient.name} - {ingredient.measure}\n              </ListItem>\n            ))}\n          </List>\n        </Box>\n\n        <Divider />\n\n        <Box>\n          <Heading size=\"md\" mb={4}>\n            Інструкції по приготуванню:\n          </Heading>\n          {selectedRecipes.map((recipe) => (\n            <Box key={recipe.idMeal} mb={6}>\n              <Heading size=\"sm\" mb={2}>\n                {recipe.strMeal}\n              </Heading>\n              <Text whiteSpace=\"pre-line\">{recipe.strInstructions}</Text>\n            </Box>\n          ))}\n        </Box>\n      </VStack>\n    </Container>\n  );\n};\n","import { StrictMode } from 'react'\nimport { createRoot } from 'react-dom/client'\nimport './index.css'\nimport App from './App.tsx'\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n)\n"],"names":["m","require$$0","createRoot","hydrateRoot","BASE_URL","api","async","query","axios","get","data","id","category","area","ingredient","getSmallImageUrl","imageUrl","replace","useSelectedRecipes","create","set","selectedRecipes","addRecipe","recipe","state","removeRecipe","filter","r","idMeal","getIngredients","ingredientsMap","Map","forEach","Object","entries","key","value","startsWith","measureKey","slice","measure","Array","from","map","name","RecipeCard","onSelect","toast","useToast","bgColor","useColorModeValue","borderColor","textColor","isSelected","some","recipeLink","jsxRuntimeExports","jsxs","Box","bg","borderWidth","borderRadius","overflow","transition","_hover","transform","shadow","position","children","jsx","ChakraLink","as","Link","to","fontSize","fontWeight","cursor","textDecoration","color","paddingTop","Image","src","strMealThumb","alt","strMeal","top","left","width","height","objectFit","VStack","p","align","spacing","HStack","flexWrap","Badge","colorScheme","px","py","strCategory","strArea","Text","noOfLines","strInstructions","Tooltip","label","placement","Button","onClick","title","description","status","duration","isClosable","leftIcon","Icon","StarIcon","variant","Pagination","currentPage","totalPages","onPageChange","activeColor","inactiveColor","justify","mt","mb","isDisabled","ChevronLeftIcon","size","_disabled","opacity","pages","i","push","getPageNumbers","page","index","minW","h","_active","rightIcon","ChevronRightIcon","queryClient","QueryClient","rootRoute","createRootRoute","component","router","useRouter","activeLinkColor","inactiveLinkColor","minH","Flex","wrap","padding","boxShadow","mr","gap","location","pathname","Outlet","recipesRoute","createRoute","getParentRoute","path","searchQuery","setSearchQuery","useState","selectedArea","setSelectedArea","selectedIngredient","setSelectedIngredient","setCurrentPage","debouncedSearch","delay","debouncedValue","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","useDebounce","areasData","isLoading","isLoadingAreas","useQuery","queryKey","queryFn","getAllAreas","ingredientsData","isLoadingIngredients","getAllIngredients","recipesData","isLoadingRecipes","searchRecipes","getRecipesByArea","getRecipesByIngredient","meals","Promise","all","fill","getRandomMeal","flatMap","meal","recipes","useMemo","Math","ceil","length","paginatedRecipes","Container","maxW","Heading","textAlign","InputGroup","InputLeftElement","pointerEvents","SearchIcon","Input","placeholder","onChange","e","target","_focus","Grid","templateColumns","Skeleton","isLoaded","Select","_a","_b","strIngredient","base","md","lg","_","recipeDetailsRoute","recipeId","useParams","recipeData","getRecipeById","ingredients","List","item","ListItem","selectedRecipesRoute","handleRemove","xl","Divider","whiteSpace","createRouter","routeTree","addChildren","App","QueryClientProvider","client","ChakraProvider","RouterProvider","document","getElementById","render","StrictMode"],"mappings":"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","x_google_ignoreList":[0]}